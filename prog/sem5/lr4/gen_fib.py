import functools

def fib_elem_gen():
    """
    Генератор, который генерирует последовательность чисел Фибоначи.
    Последовательность начинается с 0 и 1. Каждое следующее число
    является суммой двух предыдущих.
    """
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a+b

def fib_coroutine(g):
    """
    Декоратор, который превращает функцию-генератор в корутину.
    Этот декоратор позволяет функции-генератору принимать начальные
    значения через метод 'send'. Он автоматически запускает генератор
    и пропускает первое значение (используется для инициализации).
    :param g: функция-генератор, которую нужно декорировать.
    :return: функцию-генератор, которая может быть использована как корутина.
    """
    @functools.wraps(g)
    def inner(*args, **kwargs):
        gen = g(*args, **kwargs)
        next(gen) #Запускает генератор и пропускает первое значение.
        return gen
    return inner

@fib_coroutine
def my_gen():
    """
    Генератор, который возвращает заданное количество чисел Фибоначчи.
    Он работает как корутина и ожидает, что ему будет отправлено число,
    которое указывает, сколько элементов Фибоначчи нужно сгенерировать.
    После получения числа, генерирует и возвращает указанное количество
    чисел Фибоначчи.
    """
    while True:
        gen = fib_elem_gen() #Создание нового генератора Фибоначчи.
        number_of_fib_elem = yield #Ожидание, когда будет отправлено число
        while True:
            #Генерирует список из чисел Фибоначчи.
            yield [next(gen) for _ in range(number_of_fib_elem)]
            number_of_fib_elem = yield #Ожидание нового числа.

#Создание экземпляра корутны.
gen = my_gen()
print(gen.send(5)) #Запрос на получение первых 5 чисел.